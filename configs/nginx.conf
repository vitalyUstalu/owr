worker_processes auto;

# Allow access to ENV
env WR_BACKEND_URL;
env WR_REDIS_HOST;
env WR_REDIS_PORT;
env WR_REDIS_USERNAME;
env WR_REDIS_PASSWORD;
env WR_MAX_ACTIVE;
env WR_ACTIVE_TTL;
env WR_MAIN_URL;
env WR_RELEASE_INTERVAL;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/etc/openresty/lua/?.lua;;";

    init_worker_by_lua_block {
        local wr = require "wr"
        -- Start background job only in the first worker
        if ngx.worker.id() == 0 then
            local ok, err = ngx.timer.at(0, wr.release_from_queue)
            if not ok then
                ngx.log(ngx.ERR, "failed to start waiting room job: ", err)
            end
        end
    }

    server {
        listen 8080;

        location = /wr_healthcheck {
            access_by_lua_block {
                ngx.status = 200
                ngx.say("OK")
                return ngx.exit(200)
            }
        }

        # Serve static queue page
        location = /queue.html {
            root /etc/openresty/html;
        }

        # API for checking queue status
        location /wr_check {
            content_by_lua_block {
                local wr = require "wr"
                local cjson = require "cjson"
                local res = wr.check_waiting_room()

                if res.status == "active" then
                    local main_url = os.getenv("WR_MAIN_URL") or "/"
                    return ngx.redirect(main_url, ngx.HTTP_MOVED_TEMPORARILY)
                else
                    ngx.header.content_type = "application/json"
                    ngx.say(cjson.encode(res))
                end
            }
        }

        # Backend proxy (using env)
        location @backend {
            set_by_lua_block $backend_url {
                return os.getenv("WR_BACKEND_URL") or "http://127.0.0.1:9000"
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass $backend_url;
        }

        # All other requests go through the waiting room
        location / {
            access_by_lua_block {
                local wr = require "wr"
                local res = wr.check_waiting_room()
                if res.status ~= "active" then
                    return ngx.redirect("/queue.html")
                end
            }

            set_by_lua_block $backend_url {
                return os.getenv("WR_BACKEND_URL") or "http://127.0.0.1:9000"
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass $backend_url;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}
